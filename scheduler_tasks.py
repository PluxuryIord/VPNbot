import asyncio
import logging
import datetime

from aiogram import Bot
from database import db_commands as db
from keyboards import get_renewal_kb, get_main_menu_kb
from config import settings

log = logging.getLogger(__name__)


async def check_expirations(bot: Bot):
    """
    –ì–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è 1 —Ä–∞–∑ –≤ —á–∞—Å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫–∞—é—â–∏–µ/–∏—Å—Ç–µ–∫—à–∏–µ –∫–ª—é—á–∏.
    """
    log.info("Starting background expiration checker...")
    while True:
        try:
            # === 1. –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–ô, –ò–°–¢–ï–ö–ê–Æ–©–ò–• –ß–ï–†–ï–ó 24 –ß–ê–°–ê (–ó–ê–ü–†–û–° 3) ===

            #
            warning_keys = await db.get_keys_for_renewal_warning(hours=24)
            for key in warning_keys:
                try:
                    kb = get_renewal_kb(key.id)
                    await bot.send_message(
                        key.user_id,
                        f"üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:**\n\n"
                        f"–í–∞—à –∫–ª—é—á –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ ¬´{key.name}¬ª –∏—Å—Ç–µ–∫–∞–µ—Ç –º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.\n\n"
                        "–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
                        reply_markup=kb
                    )
                    await db.mark_renewal_warning_sent(key.id)
                except Exception as e:
                    log.warning(f"Failed to send 24h warning to {key.user_id} for key {key.id}: {e}")

            # === 2. –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–ô, –ö–û–¢–û–†–´–ï –ò–°–¢–ï–ö–õ–ò –í –≠–¢–û–¢ –ß–ê–° (–ó–ê–ü–†–û–° 1 –∏ 3) ===

            expired_keys = await db.get_keys_for_expiry_notification()

            for key in expired_keys:
                try:
                    #
                    if key.order_id is None:
                        #
                        await bot.send_message(
                            key.user_id,
                            "‚åõÔ∏è **–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (24—á) –∏—Å—Ç–µ–∫.**\n\n"
                            "–ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Å–∫–æ—Ä–æ—Å—Ç—å! üá´üáÆ\n"
                            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ª—é–±–æ–π —Ç–∞—Ä–∏—Ñ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∞ \"üõí –ö—É–ø–∏—Ç—å VPN\").",
                            reply_markup=get_main_menu_kb(user_id=key.user_id),
                            parse_mode="Markdown"
                        )
                    else:
                        await bot.send_message(
                            key.user_id,
                            f"‚ùå **–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ –∫–ª—é—á–∞ –∏—Å—Ç–µ–∫.**\n\n"
                            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ–≥–æ, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø.",
                            reply_markup=get_renewal_kb(key.id),
                            parse_mode="Markdown"
                        )
                    await db.mark_expiry_notification_sent(key.id)
                except Exception as e:
                    log.warning(f"Failed to send expiry notification to {key.user_id} for key {key.id}: {e}")

        except Exception as e:
            log.error(f"Error in expiration checker task: {e}")

        await asyncio.sleep(600)