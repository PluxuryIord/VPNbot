import datetime
import math

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import settings


def get_main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å VPN", callback_data="menu:buy")],
            [InlineKeyboardButton(text="üìñ –ú–æ–∏ –∫–ª—é—á–∏", callback_data="menu:keys")],
            [
                InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="menu:instruction"),
                InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu:support"),
            ],
        ]
    )


def get_country_selection_kb() -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã."""
    buttons = []
    countries = sorted(list(set(server.country for server in settings.XUI_SERVERS)))
    for country in countries:
        flag = ""
        premium = ""
        if country == "–§–∏–Ω–ª—è–Ω–¥–∏—è":
            flag = "üá´üáÆ"
            premium = "‚ö°"
        elif country == "–ì–µ—Ä–º–∞–Ω–∏—è":
            flag = "üá©üá™"
            premium = "üîπ"
        elif country == "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã":
            flag = "üá≥üá±"
            premium = "üîπ"
        buttons.append(
            InlineKeyboardButton(text=f"{flag} {country} {premium}", callback_data=f"select_country:{country}")
        )

    keyboard = []
    for i in range(0, len(buttons), 2):
        keyboard.append(buttons[i:i + 2])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_instruction_platforms_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –û–° –≤ —Ä–∞–∑–¥–µ–ª–µ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üì± Android", callback_data="instruction:android"),
                InlineKeyboardButton(text="üçé iPhone", callback_data="instruction:ios"),
            ],
            [
                InlineKeyboardButton(text="üíª Windows", callback_data="instruction:windows"),
                InlineKeyboardButton(text="üçè Mac", callback_data="instruction:macos"),
            ],
            [InlineKeyboardButton(
                text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π",
                url="https://teletype.in/@coid_siemens/3PPKfFAHxhw"
            )],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")],
        ]
    )


def get_back_to_instructions_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –û–°"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –û–°", callback_data="menu:instruction")]
        ]
    )


def get_payment_kb(payment_url: str, order_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment:{order_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞ (–∫ —Å—Ç—Ä–∞–Ω–∞–º)", callback_data="menu:buy")]
        ]
    )


def get_my_keys_kb(keys_on_page: list, total_keys: int, page: int = 0, page_size: int = 5) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è '–ú–æ–∏ –∫–ª—é—á–∏' —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if keys_on_page:
        for key in keys_on_page:
            status_icon = "‚úÖ" if key.expires_at > datetime.datetime.now() else "‚ùå"  # –ù—É–∂–µ–Ω –∏–º–ø–æ—Ä—Ç datetime –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞
            # ‚ùóÔ∏è –î–æ–±–∞–≤–∏–º callback_data –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{status_icon} –ö–ª—é—á (–¥–æ {key.expires_at.strftime('%d.%m.%Y')})",
                    callback_data=f"key_details:{key.id}:{page}"
                    # callback_data="key_details"  # –í—Ä–µ–º–µ–Ω–Ω–æ
                )
            ])

    # --- –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ---
    total_pages = math.ceil(total_keys / page_size)
    nav_row = []
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if page > 0:
        nav_row.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"mykeys_page:{page - 1}")
        )
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if total_pages > 1:
        nav_row.append(
            InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="ignore")  # –ö–Ω–æ–ø–∫–∞ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è
        )
    # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
    if page + 1 < total_pages:
        nav_row.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"mykeys_page:{page + 1}")
        )

    if nav_row:
        keyboard.append(nav_row)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

    # –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    keyboard.append([InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_key_details_kb(key_id: int, current_page: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–ª—é—á–∞."""
    keyboard = [
        [
            InlineKeyboardButton(text="üîë –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á", callback_data=f"key_copy:{key_id}:{current_page}"),
            InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"key_renew:{key_id}:{current_page}")
        ],
        # –û–±–Ω–æ–≤–ª—è–µ–º callback_data –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"mykeys_page:{current_page}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)
