import asyncio
import logging
import datetime
import math  # ‚¨ÖÔ∏è –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
from collections import defaultdict

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, Filter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import AiogramError  # ‚¨ÖÔ∏è –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç

from config import settings
from database import db_commands as db
# ‚¨áÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from keyboards import get_admin_menu_kb, get_back_to_admin_kb, get_admin_stats_kb


# –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ID –∞–¥–º–∏–Ω–∞
class IsAdmin(Filter):
    async def __call__(self, update: Message | CallbackQuery) -> bool:
        user_id = update.from_user.id
        return user_id in settings.get_admin_ids


router = Router()
router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())


# --- FSM –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ---
class BroadcastState(StatesGroup):
    waiting_for_message = State()


async def build_and_send_stats_page(update_obj: Message | CallbackQuery, page: int = 0):
    """
    –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    (–í–µ—Ä—Å–∏—è —Å —Ñ–ª–∞–≥–∞–º–∏ —Å—Ç—Ä–∞–Ω)
    """
    try:
        active_keys = await db.get_all_active_keys_details()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î: {e}")
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}"
        if isinstance(update_obj, Message):
            await update_obj.answer(error_text, reply_markup=get_back_to_admin_kb())
        else:
            await update_obj.answer("–û—à–∏–±–∫–∞ –ë–î", show_alert=True)
        return

    if not active_keys:
        no_keys_text = "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        if isinstance(update_obj, Message):
            await update_obj.answer(no_keys_text, reply_markup=get_back_to_admin_kb())
        else:
            await update_obj.message.edit_text(no_keys_text, reply_markup=get_back_to_admin_kb())
            await update_obj.answer()
        return

    # --- 1. –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–ª—è —Ö–µ–¥–µ—Ä–∞) ---
    total_active = len(active_keys)
    server_stats = defaultdict(int)
    for key in active_keys:
        try:
            server_address = key.vless_key.split('@')[1].split(':')[0]
        except Exception:
            server_address = "Unknown"
        server_stats[server_address] += 1


    server_to_country = {s.vless_server: s.country for s in settings.XUI_SERVERS}

    def _get_flag_for_country(country_name: str) -> str:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ (–∫–∞–∫ –≤ keyboards.py)"""
        if country_name == "–§–∏–Ω–ª—è–Ω–¥–∏—è": return "üá´üáÆ"
        if country_name == "–ì–µ—Ä–º–∞–Ω–∏—è": return "üá©üá™"
        if country_name == "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã": return "üá≥üá±"
        return "üè≥Ô∏è"  # –§–ª–∞–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    summary = f"üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
    summary += f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: **{total_active}**\n"
    summary += "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º (IP/–¥–æ–º–µ–Ω):\n"

    sorted_servers = sorted(server_stats.items(), key=lambda item: item[1], reverse=True)

    for server_ip, count in sorted_servers:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—É –ø–æ IP
        country = server_to_country.get(server_ip, "Unknown")
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥ –ø–æ —Å—Ç—Ä–∞–Ω–µ
        flag = _get_flag_for_country(country)
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≤ —Å—Ç—Ä–æ–∫—É
        summary += f"  - {flag} `{server_ip}`: **{count}** —à—Ç.\n"


    # --- 2. –ì–æ—Ç–æ–≤–∏–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é (–ø–æ 5 —à—Ç) ---
    page_size = 5
    total_pages = math.ceil(total_active / page_size)
    page = max(0, min(page, total_pages - 1))

    start_index = page * page_size
    end_index = start_index + page_size
    keys_on_page = active_keys[start_index:end_index]

    # --- 3. –°–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –î–õ–Ø –≠–¢–û–ô –°–¢–†–ê–ù–ò–¶–´ ---
    detailed_report = "üìà **–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∫–ª—é—á–∞–º:**\n\n"
    if not keys_on_page and total_active > 0:
        detailed_report += "–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–ª—é—á–µ–π –Ω–µ—Ç."

    for key in keys_on_page:
        server_address = "Unknown"
        flag = "üè≥Ô∏è"
        try:
            server_address = key.vless_key.split('@')[1].split(':')[0]
            country = server_to_country.get(server_address, "Unknown")
            flag = _get_flag_for_country(country)
        except Exception:
            pass

        user_info = f"{key.first_name} (ID: {key.user_id})"
        product_info = "–ü—Ä–æ–±–Ω—ã–π (1 –¥–µ–Ω—å)"
        if key.product_name:
            product_info = f"{key.product_name} ({key.duration_days} –¥–Ω.)"

        expires_str = key.expires_at.strftime('%Y-%m-%d %H:%M')

        detailed_report += (
            f"üë§ **{user_info}**\n"
            f"  - üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: {flag} `{server_address}`\n"
            f"  - üì¶ –¢–∞—Ä–∏—Ñ: {product_info}\n"
            f"  - ‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires_str}\n\n"
        )

    # --- 4. –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ---
    page_indicator = ""
    if total_pages > 1:
        page_indicator = f"\n\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} / {total_pages}"

    final_text = summary + detailed_report + page_indicator

    kb = get_admin_stats_kb(page, total_pages)

    # --- 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º ---
    try:
        if isinstance(update_obj, Message):
            await update_obj.answer(final_text, reply_markup=kb, parse_mode="Markdown")
        else:
            await update_obj.message.edit_text(final_text, reply_markup=kb, parse_mode="Markdown")
            await update_obj.answer()

    except AiogramError as e:
        if "message is not modified" in str(e).lower():
            await update_obj.answer("–í—ã —É–∂–µ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        else:
            logging.error(f"Error sending stats page: {e}")
            await update_obj.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.", show_alert=True)
    except Exception as e:
        logging.error(f"Unexpected error sending stats page: {e}")
        if isinstance(update_obj, Message):
            await update_obj.answer("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
        else:
            await update_obj.answer("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.", show_alert=True)



@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞ (–∫–æ–º–∞–Ω–¥–∞)"""
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_menu_kb()
    )


@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∫–æ–º–∞–Ω–¥–∞) - –°–¢–†–ê–ù–ò–¶–ê 1"""
    await message.answer("‚è≥ –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    await build_and_send_stats_page(message, page=0)


@router.message(Command("broadcast"))
async def start_broadcast(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ (–∫–æ–º–∞–Ω–¥–∞, –¥—É–±–ª–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É)"""
    await state.set_state(BroadcastState.waiting_for_message)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=get_back_to_admin_kb()
    )


@router.message(BroadcastState.waiting_for_message)
async def process_broadcast(message: Message, state: FSMContext, bot: Bot):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
    await state.clear()
    user_ids = await db.get_all_user_ids()
    await message.answer(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É... –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}")

    success_count = 0
    fail_count = 0

    for user_id in user_ids:
        try:
            await message.copy_to(user_id)
            success_count += 1
            await asyncio.sleep(0.1)
        except Exception as e:
            fail_count += 1
            logging.warning(f"Failed to send broadcast to {user_id}: {e}")

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
        f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
        f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ/–û—à–∏–±–∫–∞: {fail_count}",
        reply_markup=get_back_to_admin_kb()
    )


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò ---

@router.callback_query(F.data == "admin:main")
async def menu_admin_main(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞ (–∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥')"""
    try:
        await callback.message.edit_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_menu_kb()
        )
    except Exception as e:
        logging.info(f"Admin menu 'admin:main' error: {e}")
        await callback.message.delete()
        await cmd_admin(callback.message)
    await callback.answer()


@router.callback_query(F.data == "admin:stats")
async def menu_admin_stats(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' - –°–¢–†–ê–ù–ò–¶–ê 1"""
    await callback.answer("‚è≥ –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    await build_and_send_stats_page(callback, page=0)


# ‚¨áÔ∏è ‚¨áÔ∏è ‚¨áÔ∏è –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ü–ê–ì–ò–ù–ê–¶–ò–ò ‚¨áÔ∏è ‚¨áÔ∏è ‚¨áÔ∏è
@router.callback_query(F.data.startswith("admin:stats_page:"))
async def paginate_admin_stats(callback: CallbackQuery):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        # data = "admin:stats_page:1" -> split(":")[-1] = "1"
        page = int(callback.data.split(":")[-1])
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.", show_alert=True)
        return

    await build_and_send_stats_page(callback, page=page)


@router.callback_query(F.data == "admin:broadcast")
async def menu_admin_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ö–Ω–æ–ø–∫–∞ '–†–∞—Å—Å—ã–ª–∫–∞'"""
    await state.set_state(BroadcastState.waiting_for_message)
    try:
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
            reply_markup=get_back_to_admin_kb()
        )
        await callback.answer()
    except Exception as e:
        logging.warning(f"Error editing message for broadcast: {e}")
        await callback.answer()
        await start_broadcast(callback.message, state)  # Fallback