import datetime
import html
import logging
import math
import crypto_pay
import json

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart
from aiogram.exceptions import AiogramError
from config import settings
from utils import issue_key_to_user, issue_trial_key

from keyboards import get_main_menu_kb, get_payment_kb, get_instruction_platforms_kb, get_back_to_instructions_kb, \
    get_country_selection_kb, get_my_keys_kb, get_key_details_kb, get_support_kb, get_payment_method_kb
from database import db_commands as db
from payments import create_yookassa_payment, check_yookassa_payment
from utils import generate_vless_key, handle_payment_logic

log = logging.getLogger(__name__)
router = Router()

TEXT_INSTRUCTION_MENU = "‚ÑπÔ∏è **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É:"
TEXT_ANDROID = """
üì± **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android (V2Box):**

1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2Box –∏–∑ [Google Play](https://play.google.com/store/apps/details?id=com.v2box.v2box).
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á VLESS, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–ª –±–æ—Ç.
3. –û—Ç–∫—Ä–æ–π—Ç–µ V2Box –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "+" –≤–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞.
4. –í—ã–±–µ—Ä–∏—Ç–µ "Import config from Clipboard".
5. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞.
6. –ù–∞–∂–º–∏—Ç–µ –±–æ–ª—å—à—É—é –∫—Ä—É–≥–ª—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
"""
TEXT_IOS = """
üçé **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è iPhone/iPad (V2Box):**

1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2Box –∏–∑ [App Store](https://apps.apple.com/us/app/v2box-v2ray-client/id6446814670).
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á VLESS.
3. –û—Ç–∫—Ä–æ–π—Ç–µ V2Box -> –≤–∫–ª–∞–¥–∫–∞ "Configs".
4. –ù–∞–∂–º–∏—Ç–µ "+" –≤–≤–µ—Ä—Ö—É —Å–ø—Ä–∞–≤–∞.
5. –í—ã–±–µ—Ä–∏—Ç–µ "Import from clipboard".
6. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "Home" -> "Connect".
"""
TEXT_WINDOWS = """
üíª **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Windows (v2rayN):**

1. –°–∫–∞—á–∞–π—Ç–µ v2rayN-Core —Å [GitHub](https://github.com/2dust/v2rayN/releases). (–ò—â–∏—Ç–µ `v2rayN-With-Core.zip`).
2. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤, –∑–∞–ø—É—Å—Ç–∏—Ç–µ `v2rayN.exe`.
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á VLESS.
4. –í v2rayN –Ω–∞–∂–º–∏—Ç–µ `Ctrl+V`.
5. –ö–ª—é—á –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ. –ü–ö–ú -> "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä".
6. –í —Ç—Ä–µ–µ (–≤–æ–∑–ª–µ —á–∞—Å–æ–≤) –∏–∫–æ–Ω–∫–∞ v2rayN -> –ü–ö–ú -> "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏" -> "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏".
7. –¢–∞–º –∂–µ: "–†–µ–∂–∏–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏" -> "–û–±—Ö–æ–¥ LAN –∏ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –ö–∏—Ç–∞—è".
"""
TEXT_MACOS = """
üçè **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è macOS (V2RayU):**

1. –°–∫–∞—á–∞–π—Ç–µ V2RayU —Å [GitHub](https://github.com/yanue/V2rayU/releases). (–ò—â–∏—Ç–µ `.dmg`).
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á VLESS.
4. –ò–∫–æ–Ω–∫–∞ V2RayU –≤ —Å—Ç—Ä–æ–∫–µ –º–µ–Ω—é -> "Import" -> "Import from pasteboard".
5. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤ –º–µ–Ω—é.
6. –ù–∞–∂–º–∏—Ç–µ "Turn V2ray-core On".
"""
TEXT_SUPPORT = "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @NjordVPN_Support"


def _get_flag_for_country(country_name: str) -> str:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã.
    (–õ–æ–≥–∏–∫–∞ –≤–∑—è—Ç–∞ –∏–∑ keyboards.py)
    """
    if country_name == "–§–∏–Ω–ª—è–Ω–¥–∏—è": return "üá´üáÆ"
    if country_name == "–ì–µ—Ä–º–∞–Ω–∏—è": return "üá©üá™"
    if country_name == "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã": return "üá≥üá±"
    return "üè≥Ô∏è"


@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start"""
    await db.get_or_create_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.full_name
    )
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n\n"
        "–Ø –±–æ—Ç NjordVPN. –ò—â–µ—à—å –±—ã—Å—Ç—Ä—ã–π –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π VPN?\n\n"
        "–ù–µ –Ω—É–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –≤—Å–ª–µ–ø—É—é. **–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—à VPN –±–µ—Å–ø–ª–∞—Ç–Ω–æ!**\n\n"
        "–ù–∞–∂–º–∏ üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (24—á)** –≤ –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–ª—é—á.\n\n"
        "\nP.S. –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –∞–∫—Ü–∏—è–º–∏: https://t.me/NjordVPN",
        reply_markup=get_main_menu_kb(user_id=message.from_user.id),
        parse_mode="Markdown"
    )


# === –ò–Ω–ª–∞–π–Ω-–Ω–∞–≤–∏–≥–∞—Ü–∏—è ===

@router.callback_query(F.data == "menu:main")
async def menu_main(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∏–Ω–ª–∞–π–Ω)."""
    await callback.message.edit_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {callback.from_user.full_name}!\n\n"
        "–Ø –±–æ—Ç NjordVPN. –ò—â–µ—à—å –±—ã—Å—Ç—Ä—ã–π –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π VPN?\n\n"
        "–ù–µ –Ω—É–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –≤—Å–ª–µ–ø—É—é. **–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—à VPN –±–µ—Å–ø–ª–∞—Ç–Ω–æ!**\n\n"
        "–ù–∞–∂–º–∏ üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (24—á)** –≤ –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–ª—é—á.\n\n"
        "\nP.S. –ù–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –∞–∫—Ü–∏—è–º–∏: https://t.me/NjordVPN",
        reply_markup=get_main_menu_kb(user_id=callback.from_user.id),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "menu:buy")
async def menu_buy_select_country(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã."""
    await callback.message.edit_text(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
        "‚ö° –ü—Ä–µ–º–∏—É–º –ª–æ–∫–∞—Ü–∏–∏ —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é\n"
        "üîπ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏",
        reply_markup=get_country_selection_kb()  # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    )
    await callback.answer()


@router.callback_query(F.data == "trial:get")
async def process_trial_get(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥'."""
    user_id = callback.from_user.id
    log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
    await callback.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–¥–∞—á–∏...")

    success, result_data = await issue_trial_key(bot, user_id)

    # --- –ï—Å–ª–∏ –£–°–ü–ï–®–ù–û –≤—ã–¥–∞–Ω –∫–ª—é—á ---
    if success:
        vless_string = result_data
        expires_at = datetime.datetime.now() + datetime.timedelta(days=1)
        success_text = (
            f"‚úÖ **–ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á –Ω–∞ 24 —á–∞—Å–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
            f"–°–µ—Ä–≤–µ—Ä: **–§–∏–Ω–ª—è–Ω–¥–∏—è** üá´üáÆ\n\n"
            "–í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:\n"
            f"```\n{vless_string}\n```\n\n"
            f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: **{expires_at.strftime('%Y-%m-%d %H:%M')}**\n\n"
            "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –ù–û–í–´–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ–Ω—é)
        await callback.message.answer(
            success_text,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )

    # --- –ï—Å–ª–∏ –ù–ï –£–î–ê–õ–û–°–¨ (—É–∂–µ –ø–æ–ª—É—á–∞–ª –∏–ª–∏ –æ—à–∏–±–∫–∞) ---
    else:
        error_message = result_data  # –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        if error_message == "–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –≤–º–µ—Å—Ç–æ alert'–∞
            await callback.message.answer(
                "‚è≥ **–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.**\n\n"
                "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∞ \"üõí –ö—É–ø–∏—Ç—å VPN\").",
                parse_mode="Markdown"
            )
            await callback.answer()
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert
            await callback.answer(error_message, show_alert=True)


@router.callback_query(F.data.startswith("select_country:"))
async def select_country_show_tariffs(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞—Ä–∏—Ñ—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã."""
    country = callback.data.split(":")[1]
    log.info(f"User {callback.from_user.id} selected country: {country}")
    products = await db.get_products(country=country)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–∞–Ω—É

    if not products:
        await callback.message.edit_text(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è **{country}**.",
            reply_markup=get_country_selection_kb()
        )
        await callback.answer()
        return

    text = f"–¢–∞—Ä–∏—Ñ—ã –¥–ª—è **{country}**:\n\n"
    buttons = []
    for product in products:
        text += f"üîπ **{product.name}** - {product.price} —Ä—É–±.\n"
        buttons.append([
            InlineKeyboardButton(
                text=f"{product.name} ({product.price} —Ä—É–±.)",
                callback_data=f"buy_product:{product.id}:{country}"  # ID —Ç–µ–ø–µ—Ä—å —É–Ω–∏–∫–∞–ª–µ–Ω
            )
        ])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", callback_data="menu:buy")])

    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "menu:keys")
async def menu_keys_show_first_page(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ü–ï–†–í–£–Æ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await callback.answer()  # –°–Ω–∏–º–∞–µ–º —á–∞—Å–∏–∫–∏

    user_id = callback.from_user.id
    page = 0  # –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page_size = 5

    total_keys = await db.count_user_keys(user_id)
    if total_keys == 0:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")]]
            ),
        )
        return

    keys_on_page = await db.get_user_keys(user_id, page=page, page_size=page_size)
    kb = get_my_keys_kb(keys_on_page, total_keys, page=page, page_size=page_size)

    total_pages = math.ceil(total_keys / page_size)
    text = "üîë **–í–∞—à–∏ –∫–ª—é—á–∏:**\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏ —É–∑–Ω–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
    if total_pages > 1:
        text += f"\n\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –∫–ª—é—á–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="Markdown")


@router.callback_query(F.data.startswith("mykeys_page:"))
async def menu_keys_paginate(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ '–ù–∞–∑–∞–¥'/'–í–ø–µ—Ä–µ–¥'."""
    try:
        page = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        log.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", show_alert=True)
        return

    await callback.answer()  # –°–Ω–∏–º–∞–µ–º —á–∞—Å–∏–∫–∏

    user_id = callback.from_user.id
    page_size = 5

    total_keys = await db.count_user_keys(user_id)
    keys_on_page = await db.get_user_keys(user_id, page=page, page_size=page_size)
    kb = get_my_keys_kb(keys_on_page, total_keys, page=page, page_size=page_size)

    total_pages = math.ceil(total_keys / page_size)
    text = "üîë **–í–∞—à–∏ –∫–ª—é—á–∏:**\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏ —É–∑–Ω–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
    if total_pages > 1:
        text += f"\n\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
    try:
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="Markdown")
    except AiogramError as e:
        if "message is not modified" in str(e).lower():
            # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ "—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ", –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –µ–µ
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


@router.callback_query(F.data.startswith("key_details:"))
async def menu_key_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞. (–í–µ—Ä—Å–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–æ–π)"""
    try:
        _, key_id_str, page_str = callback.data.split(":")
        key_id = int(key_id_str)
        current_page = int(page_str)
    except (IndexError, ValueError):
        log.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∫–ª—é—á–∞: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞.", show_alert=True)
        return

    await callback.answer()

    key = await db.get_key_by_id(key_id)

    if not key or key.user_id != callback.from_user.id:
        await callback.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        await menu_keys_show_first_page(callback)
        return

    server_ip_to_country = {s.vless_server: s.country for s in settings.XUI_SERVERS}
    country = "Unknown"
    flag = "üè≥Ô∏è"
    try:
        server_ip = key.vless_key.split('@')[1].split(':')[0]
        country = server_ip_to_country.get(server_ip, "Unknown")
        flag = _get_flag_for_country(country)
    except Exception:
        pass  #

    server_info = f"{country} {flag}"
    now = datetime.datetime.now()
    if key.expires_at > now:
        status = "‚úÖ <b>–ê–∫—Ç–∏–≤–µ–Ω</b>"
        remaining = key.expires_at - now
        days = remaining.days
        hours = remaining.seconds // 3600
        time_left = f"{days} –¥–Ω. {hours} —á."
    else:
        status = "‚ùå <b>–ò—Å—Ç–µ–∫</b>"
        time_left = "0"

    text = (
        f"üîë <b>–î–µ—Ç–∞–ª–∏ –∫–ª—é—á–∞</b> ({status})\n\n"
        f"–°–µ—Ä–≤–µ—Ä: <b>{server_info}</b>\n"
        f"–ò—Å—Ç–µ–∫–∞–µ—Ç: <code>{key.expires_at.strftime('%Y-%m-%d %H:%M')}</code>\n"  # 
        f"–û—Å—Ç–∞–ª–æ—Å—å: {time_left}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π."
    )

    kb = get_key_details_kb(key_id, current_page)

    try:
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    except AiogramError:
        pass


@router.callback_query(F.data.startswith("key_copy:"))
async def menu_key_copy(callback: CallbackQuery):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è VLESS-–∫–ª—é—á.
    """
    try:
        _, key_id_str, page_str = callback.data.split(":")
        key_id = int(key_id_str)
        current_page = int(page_str)
    except (IndexError, ValueError):
        log.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞.", show_alert=True)
        return

    key = await db.get_key_by_id(key_id)

    if not key or key.user_id != callback.from_user.id:
        await callback.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    server_ip_to_country = {s.vless_server: s.country for s in settings.XUI_SERVERS}
    country = "Unknown"
    flag = "üè≥Ô∏è"
    try:
        server_ip = key.vless_key.split('@')[1].split(':')[0]
        country = server_ip_to_country.get(server_ip, "Unknown")
        flag = _get_flag_for_country(country)
    except Exception:
        pass
    server_info = f"{country} {flag}"

    now = datetime.datetime.now()
    if key.expires_at > now:
        status = "‚úÖ <b>–ê–∫—Ç–∏–≤–µ–Ω</b>"
        remaining = key.expires_at - now
        days = remaining.days
        hours = remaining.seconds // 3600
        time_left = f"{days} –¥–Ω. {hours} —á."
    else:
        status = "‚ùå <b>–ò—Å—Ç–µ–∫</b>"
        time_left = "0"

    text = (
        f"üîë <b>–î–µ—Ç–∞–ª–∏ –∫–ª—é—á–∞</b> ({status})\n\n"
        f"–°–µ—Ä–≤–µ—Ä: <b>{server_info}</b>\n"
        f"–ò—Å—Ç–µ–∫–∞–µ—Ç: <code>{key.expires_at.strftime('%Y-%m-%d %H:%M')}</code>\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å: {time_left}\n\n"
        "‚¨áÔ∏è <b>–í–∞—à –∫–ª—é—á (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):</b> ‚¨áÔ∏è\n"
        f"<code>{html.escape(key.vless_key)}</code>"
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"key_renew:{key_id}:{current_page}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"mykeys_page:{current_page}")]
        ]
    )

    try:
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await callback.answer("–ö–ª—é—á –ø–æ–∫–∞–∑–∞–Ω.", show_alert=True)
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–ª—é—á–∞ {key_id}: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á.", show_alert=True)


@router.callback_query(F.data.startswith("key_renew:"))
async def menu_key_renew(callback: CallbackQuery, bot: Bot):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–ª—é—á–∞."""
    try:
        _, key_id_str, page_str = callback.data.split(":")
        key_id = int(key_id_str)
        current_page = int(page_str)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    except (IndexError, ValueError):
        log.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–ª—é—á–∞: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è.", show_alert=True)
        return

    await callback.answer("‚è≥ –ì–æ—Ç–æ–≤–ª—é —Å—á–µ—Ç –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è...")

    # 1. –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑/–ø—Ä–æ–¥—É–∫—Ç
    key = await db.get_key_by_id(key_id)
    if not key or key.user_id != callback.from_user.id:
        await callback.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    original_order = await db.get_order_by_id(key.order_id)
    if not original_order:
        log.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ {key.order_id} –¥–ª—è –∫–ª—é—á–∞ {key_id}")
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑.", show_alert=True)
        return

    product = await db.get_product_by_id(original_order.product_id)
    if not product:
        log.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç {original_order.product_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {key.order_id}")
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.", show_alert=True)
        return

    # 2. –°–æ–∑–¥–∞–µ–º –ù–û–í–´–ô –∑–∞–∫–∞–∑ (–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    try:
        renewal_order_id = await db.create_order(
            user_id=callback.from_user.id,
            product_id=product.id,
            amount=product.price
        )
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞ {key_id}: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ.", show_alert=True)
        return

    # 3. –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –≤ –ÆKassa, –ø–µ—Ä–µ–¥–∞–µ–º ID –∫–ª—é—á–∞ –∏ ID –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ metadata
    payment_metadata = {
        "renewal_key_id": str(key_id),  # ID –∫–ª—é—á–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º
        "renewal_order_id": str(renewal_order_id)  # ID –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    }
    payment_url, payment_id = await create_yookassa_payment(
        amount=product.price,
        description=f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ '{product.name}' (–ó–∞–∫–∞–∑ #{renewal_order_id})",
        order_id=renewal_order_id,  # –ü–µ—Ä–µ–¥–∞–µ–º ID –ù–û–í–û–ì–û –∑–∞–∫–∞–∑–∞
        metadata=payment_metadata
    )

    # 4. –û–±–Ω–æ–≤–ª—è–µ–º –ù–û–í–´–ô –∑–∞–∫–∞–∑, –¥–æ–±–∞–≤–ª—è—è payment_id
    await db.update_order_status(renewal_order_id, payment_id, status='pending')

    # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    kb = get_payment_kb(payment_url, renewal_order_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ù–û–í–û–ì–û –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –¥–µ—Ç–∞–ª—è–º –∫–ª—é—á–∞"
    kb.inline_keyboard.append(
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–µ—Ç–∞–ª—è–º", callback_data=f"key_details:{key_id}:{current_page}")]
    )

    await callback.message.edit_text(
        f"–í—ã –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç–µ: **{product.name}**\n"
        f"–°—Ä–æ–∫: +{product.duration_days} –¥–Ω–µ–π\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: **{product.price} —Ä—É–±.**\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:",
        reply_markup=kb,
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "menu:help")
async def menu_static(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∏–Ω–ª–∞–π–Ω)."""
    if callback.data == "menu:help":
        text = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é V2Box:\n1. ...\n2. ..."
    else:
        text = "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @NjordVPN_Support"

    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")]]
        ),
    )


@router.callback_query(F.data == "menu:instruction")
async def menu_instruction_platforms(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –û–° –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."""
    await callback.message.edit_text(
        TEXT_INSTRUCTION_MENU,
        reply_markup=get_instruction_platforms_kb(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("instruction:"))
async def menu_instruction_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –û–°."""
    platform = callback.data.split(":")[1]
    text = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    if platform == "android":
        text = TEXT_ANDROID
    elif platform == "ios":
        text = TEXT_IOS
    elif platform == "windows":
        text = TEXT_WINDOWS
    elif platform == "macos":
        text = TEXT_MACOS

    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_instructions_kb(),  # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        parse_mode="Markdown",
        disable_web_page_preview=True
    )


@router.callback_query(F.data == "menu:support")
async def menu_support(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ñ–µ—Ä—Ç—É."""
    log.info("–í–æ—à–ª–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ menu_support")  # <-- –õ–æ–≥ 1
    try:
        kb = get_support_kb()
        kb_json = kb.model_dump_json(indent=2)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON –¥–ª—è –ª–æ–≥–∞
        log.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:\n{kb_json}")  # <-- –õ–æ–≥ 2

        await callback.message.edit_text(
            TEXT_SUPPORT,
            reply_markup=kb
        )
        log.info("–í—ã–∑–æ–≤ edit_text —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")  # <-- –õ–æ–≥ 3
        await callback.answer()
        log.info("–í—ã–∑–æ–≤ callback.answer() —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")  # <-- –õ–æ–≥ 4
    except AiogramError as e:
        # –õ–æ–≤–∏–º –æ–±—â–∏–µ –æ—à–∏–±–∫–∏ aiogram
        log.error(f"AiogramError –≤ menu_support: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é.", show_alert=True)
    except Exception as e:
        # –õ–æ–≤–∏–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        log.exception("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ menu_support:")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º exception –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç—Ä–µ–π—Å–±–µ–∫–∞
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.", show_alert=True)


@router.callback_query(F.data.startswith("buy_product:"))
async def process_buy_callback(callback: CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–∞—Ä–∏—Ñ–∞.
    –®–∞–≥ 1: –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ (pending) –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã.
    """
    await callback.answer(cache_time=1)
    try:
        _, product_id_str, country = callback.data.split(":")
        product_id = int(product_id_str)
    except ValueError:
        log.error(f"Invalid callback data format: {callback.data}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    log.info(f"User {callback.from_user.id} initiated purchase for product {product_id} in country {country}")

    product = await db.get_product_by_id(product_id)
    if not product:
        await callback.answer("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    order_id = await db.create_order(
        user_id=callback.from_user.id,
        product_id=product_id,
        amount=product.price
    )

    kb = get_payment_method_kb(order_id, country)

    try:
        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: **{product.name} ({country})**\n"
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: **{product.price} —Ä—É–±.**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=kb,
            parse_mode="Markdown"
        )
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ—Å–∞ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


#
@router.callback_query(F.data.startswith("pay_method:"))
async def process_payment_method(callback: CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã (–ÆKassa –∏–ª–∏ Crypto).
    –®–∞–≥ 2: –°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ –ù–û–í–´–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    """
    await callback.answer("‚è≥ –°–æ–∑–¥–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É...")

    try:
        _, method, order_id_str = callback.data.split(":")
        order_id = int(order_id_str)
    except ValueError:
        log.error(f"Invalid pay_method callback data: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.", show_alert=True)
        return

    order = await db.get_order_by_id(order_id)
    if not order or order.user_id != callback.from_user.id:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    if order.status != 'pending':
        await callback.answer("–ü–ª–∞—Ç–µ–∂ –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É —É–∂–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
        return

    product = await db.get_product_by_id(order.product_id)
    if not product:
        await callback.answer("–û—à–∏–±–∫–∞: –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞.", show_alert=True)
        return

    metadata = {
        "order_id": str(order_id), #
        "country": product.country or "Unknown",
        "renewal_key_id": None #
    }

    payment_url = None
    payment_id = None
    payment_system_name = ""

    try:
        if method == "yookassa":
            payment_system_name = "–ÆKassa"
            payment_url, payment_id = await create_yookassa_payment(
                amount=product.price,
                description=f"–û–ø–ª–∞—Ç–∞ '{product.name}' ({metadata['country']}) (–ó–∞–∫–∞–∑ #{order_id})",
                order_id=order_id,
                metadata=metadata
            )

        elif method == "crypto":
            payment_system_name = "Crypto Bot"
            #
            #
            payment_url = await crypto_pay.create_crypto_invoice(
                amount_rub=product.price,
                currency="RUB",
                order_id=order_id,
                metadata=metadata
            )
            payment_id = f"crypto_{order_id}"

        if not payment_url:
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è {payment_system_name}")

    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ {payment_system_name} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
        await callback.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –≤ {payment_system_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±.", show_alert=True)
        return

    await db.update_order_status(order_id, payment_id, status='pending')

    kb = get_payment_kb(payment_url, order_id)

    try:
        await callback.message.answer(
            f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É ({payment_system_name}):\n"
            f"–¢–∞—Ä–∏—Ñ: **{product.name} ({metadata['country']})**\n"
            f"–°—É–º–º–∞: **{product.price} —Ä—É–±.**\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:",
            reply_markup=kb,
            parse_mode="Markdown"
        )
        await callback.message.delete()
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/—É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ: {e}")


@router.callback_query(F.data.startswith("check_payment:"))
async def process_check_payment(callback: CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É".
    (–í–µ—Ä—Å–∏—è —Å –∞–≤—Ç–æ-–≤–µ–±—Ö—É–∫–∞–º–∏)
    """
    order_id = int(callback.data.split(":")[1])

    order = await db.get_order_by_id(order_id)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    if order.status == 'paid':
        await callback.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω. –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø—Ä–∏–π—Ç–∏ –≤ —á–∞—Ç.", show_alert=True)
        return

    if order.status == 'pending':
        if order.payment_id and not order.payment_id.startswith("crypto_"):
            await callback.answer("–ü—Ä–æ–≤–µ—Ä—è—é –ÆKassa... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", show_alert=True)
            payment_info = await check_yookassa_payment(order.payment_id)
            if payment_info and payment_info.status == 'succeeded':
                metadata = payment_info.metadata
                success, message_text = await handle_payment_logic(bot, order_id, metadata)
                await callback.message.edit_text(message_text, parse_mode="Markdown")
            else:
                await callback.answer("–ü–ª–∞—Ç–µ–∂ –≤ –ÆKassa –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª.", show_alert=True)
        else:
             await callback.answer("–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ, –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –∫–ª—é—á –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.", show_alert=True)

    else:
        await callback.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order.status}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)