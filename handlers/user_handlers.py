import datetime
import logging
import math

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart
from aiogram.exceptions import AiogramError
from config import settings
from utils import issue_key_to_user, issue_trial_key

from keyboards import get_main_menu_kb, get_payment_kb, get_instruction_platforms_kb, get_back_to_instructions_kb, \
    get_country_selection_kb, get_my_keys_kb, get_key_details_kb, get_support_kb
from database import db_commands as db
from payments import create_yookassa_payment, check_yookassa_payment
from utils import generate_vless_key

log = logging.getLogger(__name__)
router = Router()

TEXT_INSTRUCTION_MENU = "‚ÑπÔ∏è **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É:"
TEXT_ANDROID = """
üì± **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android (V2Box):**

1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2Box –∏–∑ [Google Play](https://play.google.com/store/apps/details?id=com.v2box.v2box).
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á VLESS, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–ª –±–æ—Ç.
3. –û—Ç–∫—Ä–æ–π—Ç–µ V2Box –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "+" –≤–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞.
4. –í—ã–±–µ—Ä–∏—Ç–µ "Import config from Clipboard".
5. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞.
6. –ù–∞–∂–º–∏—Ç–µ –±–æ–ª—å—à—É—é –∫—Ä—É–≥–ª—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
"""
TEXT_IOS = """
üçé **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è iPhone/iPad (V2Box):**

1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2Box –∏–∑ [App Store](https://apps.apple.com/us/app/v2box-v2ray-client/id6446814670).
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á VLESS.
3. –û—Ç–∫—Ä–æ–π—Ç–µ V2Box -> –≤–∫–ª–∞–¥–∫–∞ "Configs".
4. –ù–∞–∂–º–∏—Ç–µ "+" –≤–≤–µ—Ä—Ö—É —Å–ø—Ä–∞–≤–∞.
5. –í—ã–±–µ—Ä–∏—Ç–µ "Import from clipboard".
6. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "Home" -> "Connect".
"""
TEXT_WINDOWS = """
üíª **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Windows (v2rayN):**

1. –°–∫–∞—á–∞–π—Ç–µ v2rayN-Core —Å [GitHub](https://github.com/2dust/v2rayN/releases). (–ò—â–∏—Ç–µ `v2rayN-With-Core.zip`).
2. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤, –∑–∞–ø—É—Å—Ç–∏—Ç–µ `v2rayN.exe`.
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á VLESS.
4. –í v2rayN –Ω–∞–∂–º–∏—Ç–µ `Ctrl+V`.
5. –ö–ª—é—á –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ. –ü–ö–ú -> "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä".
6. –í —Ç—Ä–µ–µ (–≤–æ–∑–ª–µ —á–∞—Å–æ–≤) –∏–∫–æ–Ω–∫–∞ v2rayN -> –ü–ö–ú -> "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏" -> "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏".
7. –¢–∞–º –∂–µ: "–†–µ–∂–∏–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏" -> "–û–±—Ö–æ–¥ LAN –∏ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –ö–∏—Ç–∞—è".
"""
TEXT_MACOS = """
üçè **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è macOS (V2RayU):**

1. –°–∫–∞—á–∞–π—Ç–µ V2RayU —Å [GitHub](https://github.com/yanue/V2rayU/releases). (–ò—â–∏—Ç–µ `.dmg`).
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á VLESS.
4. –ò–∫–æ–Ω–∫–∞ V2RayU –≤ —Å—Ç—Ä–æ–∫–µ –º–µ–Ω—é -> "Import" -> "Import from pasteboard".
5. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –≤ –º–µ–Ω—é.
6. –ù–∞–∂–º–∏—Ç–µ "Turn V2ray-core On".
"""
TEXT_SUPPORT = "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @NjordVPN_Support"


@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start"""
    await db.get_or_create_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.full_name
    )
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ VPN-–∫–ª—é—á–µ–π. "
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
        reply_markup=get_main_menu_kb(user_id=message.from_user.id)
    )


# === –ò–Ω–ª–∞–π–Ω-–Ω–∞–≤–∏–≥–∞—Ü–∏—è ===

@router.callback_query(F.data == "menu:main")
async def menu_main(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∏–Ω–ª–∞–π–Ω)."""
    await callback.message.edit_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ VPN-–∫–ª—é—á–µ–π. "
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
        reply_markup=get_main_menu_kb(user_id=callback.from_user.id)
    )


@router.callback_query(F.data == "menu:buy")
async def menu_buy_select_country(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã."""
    await callback.message.edit_text(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
        "‚ö° –ü—Ä–µ–º–∏—É–º –ª–æ–∫–∞—Ü–∏–∏ —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é\n"
        "üîπ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏",
        reply_markup=get_country_selection_kb()  # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    )
    await callback.answer()


@router.callback_query(F.data == "trial:get")
async def process_trial_get(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥'."""
    user_id = callback.from_user.id
    log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
    await callback.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–¥–∞—á–∏...")  # –û—Ç–≤–µ—Ç-–∑–∞–≥–ª—É—à–∫–∞

    success, result_data = await issue_trial_key(bot, user_id)

    # --- –ï—Å–ª–∏ –£–°–ü–ï–®–ù–û –≤—ã–¥–∞–Ω –∫–ª—é—á ---
    if success:
        vless_string = result_data
        expires_at = datetime.datetime.now() + datetime.timedelta(days=1)
        success_text = (
            f"‚úÖ **–ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á –Ω–∞ 24 —á–∞—Å–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
            f"–°–µ—Ä–≤–µ—Ä: **–§–∏–Ω–ª—è–Ω–¥–∏—è** üá´üáÆ\n\n"
            "–í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:\n"
            f"```\n{vless_string}\n```\n\n"
            f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: **{expires_at.strftime('%Y-%m-%d %H:%M')}**\n\n"
            "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ V2Box. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –ù–û–í–´–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ–Ω—é)
        await callback.message.answer(
            success_text,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
        # –ú–æ–∂–Ω–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ –º–µ–Ω—é, —É–±—Ä–∞–≤ –∫–Ω–æ–ø–∫—É —Ç—Ä–∏–∞–ª–∞, –Ω–æ –ø—Ä–æ—â–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
        # await callback.message.edit_reply_markup(reply_markup=get_main_menu_kb()) # –ü—Ä–∏–º–µ—Ä

    # --- –ï—Å–ª–∏ –ù–ï –£–î–ê–õ–û–°–¨ (—É–∂–µ –ø–æ–ª—É—á–∞–ª –∏–ª–∏ –æ—à–∏–±–∫–∞) ---
    else:
        error_message = result_data  # –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        if error_message == "–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –≤–º–µ—Å—Ç–æ alert'–∞
            await callback.message.answer(
                "‚è≥ **–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.**\n\n"
                "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∞ \"üõí –ö—É–ø–∏—Ç—å VPN\").",
                parse_mode="Markdown"
            )
            await callback.answer()  # –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Å–∏–∫–∏
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert
            await callback.answer(error_message, show_alert=True)


@router.callback_query(F.data.startswith("select_country:"))
async def select_country_show_tariffs(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞—Ä–∏—Ñ—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã."""
    country = callback.data.split(":")[1]
    log.info(f"User {callback.from_user.id} selected country: {country}")
    products = await db.get_products(country=country)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–∞–Ω—É

    if not products:
        await callback.message.edit_text(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è **{country}**.",
            reply_markup=get_country_selection_kb()
        )
        await callback.answer()
        return

    text = f"–¢–∞—Ä–∏—Ñ—ã –¥–ª—è **{country}**:\n\n"
    buttons = []
    for product in products:
        text += f"üîπ **{product.name}** - {product.price} —Ä—É–±.\n"
        buttons.append([
            InlineKeyboardButton(
                text=f"{product.name} ({product.price} —Ä—É–±.)",
                callback_data=f"buy_product:{product.id}:{country}"  # ID —Ç–µ–ø–µ—Ä—å —É–Ω–∏–∫–∞–ª–µ–Ω
            )
        ])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", callback_data="menu:buy")])

    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "menu:keys")
async def menu_keys_show_first_page(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ü–ï–†–í–£–Æ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await callback.answer()  # –°–Ω–∏–º–∞–µ–º —á–∞—Å–∏–∫–∏

    user_id = callback.from_user.id
    page = 0  # –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page_size = 5

    total_keys = await db.count_user_keys(user_id)
    if total_keys == 0:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")]]
            ),
        )
        return

    keys_on_page = await db.get_user_keys(user_id, page=page, page_size=page_size)
    kb = get_my_keys_kb(keys_on_page, total_keys, page=page, page_size=page_size)

    total_pages = math.ceil(total_keys / page_size)
    text = "üîë **–í–∞—à–∏ –∫–ª—é—á–∏:**"
    if total_pages > 1:
        text += f"\n\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –∫–ª—é—á–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="Markdown")


@router.callback_query(F.data.startswith("mykeys_page:"))
async def menu_keys_paginate(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ '–ù–∞–∑–∞–¥'/'–í–ø–µ—Ä–µ–¥'."""
    try:
        page = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        log.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", show_alert=True)
        return

    await callback.answer()  # –°–Ω–∏–º–∞–µ–º —á–∞—Å–∏–∫–∏

    user_id = callback.from_user.id
    page_size = 5

    total_keys = await db.count_user_keys(user_id)
    keys_on_page = await db.get_user_keys(user_id, page=page, page_size=page_size)
    kb = get_my_keys_kb(keys_on_page, total_keys, page=page, page_size=page_size)

    total_pages = math.ceil(total_keys / page_size)
    text = "üîë **–í–∞—à–∏ –∫–ª—é—á–∏:**"
    if total_pages > 1:
        text += f"\n\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
    try:
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="Markdown")
    except AiogramError as e:
        if "message is not modified" in str(e).lower():
            # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ "—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ", –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –µ–µ
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


@router.callback_query(F.data.startswith("key_details:"))
async def menu_key_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞."""
    try:
        # –ü–∞—Ä—Å–∏–º ID –∫–ª—é—á–∞ –∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        _, key_id_str, page_str = callback.data.split(":")
        key_id = int(key_id_str)
        current_page = int(page_str)
    except (IndexError, ValueError):
        log.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∫–ª—é—á–∞: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞.", show_alert=True)
        return

    await callback.answer()  # –°–Ω–∏–º–∞–µ–º —á–∞—Å–∏–∫–∏

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –ë–î –ø–æ ID
    key = await db.get_key_by_id(key_id)

    if not key or key.user_id != callback.from_user.id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        # –í–µ—Ä–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∫–ª—é—á–µ–π (–Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        # TODO: –õ—É—á—à–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–∞ current_page, –Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ menu_keys_show_first_page –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å
        await menu_keys_show_first_page(callback)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    now = datetime.datetime.now()
    if key.expires_at > now:
        status = "‚úÖ *–ê–∫—Ç–∏–≤–µ–Ω*";
        remaining = key.expires_at - now;
        time_left = f"{remaining.days} –¥–Ω. {remaining.seconds // 3600} —á."
    else:
        status = "‚ùå *–ò—Å—Ç–µ–∫*";
        time_left = "0"

    text = (
        f"üîë **–î–µ—Ç–∞–ª–∏ –∫–ª—é—á–∞** ({status})\n\n"
        f"–°–µ—Ä–≤–µ—Ä: `{key.vless_key.split('@')[1].split(':')[0]}`\n"
        f"–ü–æ—Ä—Ç: `{key.vless_key.split(':')[2].split('?')[0]}`\n"
        f"–ò—Å—Ç–µ–∫–∞–µ—Ç: `{key.expires_at.strftime('%Y-%m-%d %H:%M')}`\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å: {time_left}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π."
    )

    # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = get_key_details_kb(key_id, current_page)

    try:
        await callback.message.edit_text(text, reply_markup=kb, parse_mode="Markdown")
    except AiogramError:
        pass


@router.callback_query(F.data.startswith("key_copy:"))
async def menu_key_copy(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        # –ü–∞—Ä—Å–∏–º ID –∫–ª—é—á–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)
        _, key_id_str, _ = callback.data.split(":")
        key_id = int(key_id_str)
    except (IndexError, ValueError):
        log.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –ø–æ ID
    key = await db.get_key_by_id(key_id)

    if not key or key.user_id != callback.from_user.id:
        await callback.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    try:
        await callback.message.answer(
            f"–í–∞—à –∫–ª—é—á (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è):\n\n<code>{key.vless_key}</code>",
            parse_mode="HTML"
        )
        await callback.answer("–ö–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç!", show_alert=True)
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª—é—á–∞ {key_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª—é—á.", show_alert=True)


@router.callback_query(F.data.startswith("key_renew:"))
async def menu_key_renew(callback: CallbackQuery, bot: Bot):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–ª—é—á–∞."""
    try:
        _, key_id_str, page_str = callback.data.split(":")
        key_id = int(key_id_str)
        current_page = int(page_str)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    except (IndexError, ValueError):
        log.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–ª—é—á–∞: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è.", show_alert=True)
        return

    await callback.answer("‚è≥ –ì–æ—Ç–æ–≤–ª—é —Å—á–µ—Ç –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è...")

    # 1. –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑/–ø—Ä–æ–¥—É–∫—Ç
    key = await db.get_key_by_id(key_id)
    if not key or key.user_id != callback.from_user.id:
        await callback.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    original_order = await db.get_order_by_id(key.order_id)
    if not original_order:
        log.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ {key.order_id} –¥–ª—è –∫–ª—é—á–∞ {key_id}")
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑.", show_alert=True)
        return

    product = await db.get_product_by_id(original_order.product_id)
    if not product:
        log.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç {original_order.product_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {key.order_id}")
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.", show_alert=True)
        return

    # 2. –°–æ–∑–¥–∞–µ–º –ù–û–í–´–ô –∑–∞–∫–∞–∑ (–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    try:
        renewal_order_id = await db.create_order(
            user_id=callback.from_user.id,
            product_id=product.id,
            amount=product.price
        )
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞ {key_id}: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ.", show_alert=True)
        return

    # 3. –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –≤ –ÆKassa, –ø–µ—Ä–µ–¥–∞–µ–º ID –∫–ª—é—á–∞ –∏ ID –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ metadata
    payment_metadata = {
        "renewal_key_id": str(key_id),  # ID –∫–ª—é—á–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º
        "renewal_order_id": str(renewal_order_id)  # ID –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    }
    payment_url, payment_id = await create_yookassa_payment(
        amount=product.price,
        description=f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ '{product.name}' (–ó–∞–∫–∞–∑ #{renewal_order_id})",
        order_id=renewal_order_id,  # –ü–µ—Ä–µ–¥–∞–µ–º ID –ù–û–í–û–ì–û –∑–∞–∫–∞–∑–∞
        metadata=payment_metadata
    )

    # 4. –û–±–Ω–æ–≤–ª—è–µ–º –ù–û–í–´–ô –∑–∞–∫–∞–∑, –¥–æ–±–∞–≤–ª—è—è payment_id
    await db.update_order_status(renewal_order_id, payment_id, status='pending')

    # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    kb = get_payment_kb(payment_url, renewal_order_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ù–û–í–û–ì–û –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –¥–µ—Ç–∞–ª—è–º –∫–ª—é—á–∞"
    kb.inline_keyboard.append(
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–µ—Ç–∞–ª—è–º", callback_data=f"key_details:{key_id}:{current_page}")]
    )

    await callback.message.edit_text(
        f"–í—ã –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç–µ: **{product.name}**\n"
        f"–°—Ä–æ–∫: +{product.duration_days} –¥–Ω–µ–π\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: **{product.price} —Ä—É–±.**\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:",
        reply_markup=kb,
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "menu:help")
async def menu_static(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∏–Ω–ª–∞–π–Ω)."""
    if callback.data == "menu:help":
        text = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é V2Box:\n1. ...\n2. ..."
    else:
        text = "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @NjordVPN_Support"

    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")]]
        ),
    )


@router.callback_query(F.data == "menu:instruction")
async def menu_instruction_platforms(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –û–° –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."""
    await callback.message.edit_text(
        TEXT_INSTRUCTION_MENU,
        reply_markup=get_instruction_platforms_kb(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("instruction:"))
async def menu_instruction_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –û–°."""
    platform = callback.data.split(":")[1]
    text = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    if platform == "android":
        text = TEXT_ANDROID
    elif platform == "ios":
        text = TEXT_IOS
    elif platform == "windows":
        text = TEXT_WINDOWS
    elif platform == "macos":
        text = TEXT_MACOS

    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_instructions_kb(),  # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        parse_mode="Markdown",
        disable_web_page_preview=True
    )


@router.callback_query(F.data == "menu:support")
async def menu_support(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ñ–µ—Ä—Ç—É."""
    log.info("–í–æ—à–ª–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ menu_support")  # <-- –õ–æ–≥ 1
    try:
        kb = get_support_kb()
        kb_json = kb.model_dump_json(indent=2)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON –¥–ª—è –ª–æ–≥–∞
        log.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:\n{kb_json}")  # <-- –õ–æ–≥ 2

        await callback.message.edit_text(
            TEXT_SUPPORT,
            reply_markup=kb
        )
        log.info("–í—ã–∑–æ–≤ edit_text —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")  # <-- –õ–æ–≥ 3
        await callback.answer()
        log.info("–í—ã–∑–æ–≤ callback.answer() —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")  # <-- –õ–æ–≥ 4
    except AiogramError as e:
        # –õ–æ–≤–∏–º –æ–±—â–∏–µ –æ—à–∏–±–∫–∏ aiogram
        log.error(f"AiogramError –≤ menu_support: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é.", show_alert=True)
    except Exception as e:
        # –õ–æ–≤–∏–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        log.exception("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ menu_support:")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º exception –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç—Ä–µ–π—Å–±–µ–∫–∞
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.", show_alert=True)


@router.callback_query(F.data.startswith("buy_product:"))
async def process_buy_callback(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–∞—Ä–∏—Ñ–∞ (—Ç–µ–ø–µ—Ä—å —Å–æ —Å—Ç—Ä–∞–Ω–æ–π)"""
    await callback.answer(cache_time=1)
    try:
        _, product_id_str, country = callback.data.split(":")
        product_id = int(product_id_str)
    except ValueError:
        log.error(f"Invalid callback data format: {callback.data}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    log.info(f"User {callback.from_user.id} initiated purchase for product {product_id} in country {country}")

    product = await db.get_product_by_id(product_id)
    if not product:
        await callback.message.edit_text(
            "–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", callback_data="menu:buy")]])
        )
        return

    # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
    order_id = await db.create_order(
        user_id=callback.from_user.id,
        product_id=product_id,
        amount=product.price
    )

    # 2. –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –≤ –ÆKassa, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É –≤ metadata
    payment_url, payment_id = await create_yookassa_payment(
        amount=product.price,
        description=f"–û–ø–ª–∞—Ç–∞ '{product.name}' ({country}) (–ó–∞–∫–∞–∑ #{order_id})",
        order_id=order_id,
        metadata={"country": country}  # ‚¨ÖÔ∏è –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É —Å—é–¥–∞
    )

    # 3. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑, –¥–æ–±–∞–≤–ª—è—è payment_id
    await db.update_order_status(order_id, payment_id, status='pending')

    # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    kb = get_payment_kb(payment_url, order_id)  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º"

    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: **{product.name} ({country})**\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: **{product.price} —Ä—É–±.**\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:",
        reply_markup=kb,
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("check_payment:"))
async def process_check_payment(callback: CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É".
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∫ –Ω–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏, —Ç–∞–∫ –∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è.
    """
    order_id = int(callback.data.split(":")[1])

    order = await db.get_order_by_id(order_id)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    if order.status == 'paid':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∏–ª–∏ –Ω–æ–≤—ã–π –∫–ª—é—á
        # (–ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±: –µ—Å–ª–∏ –∫ —ç—Ç–æ–º—É order_id –ø—Ä–∏–≤—è–∑–∞–Ω –∫–ª—é—á, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –±—ã–ª–∞ –Ω–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞)
        key_linked_to_order = await db.get_user_key_by_order_id(order_id)
        if key_linked_to_order:
            await callback.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω –∏ –∫–ª—é—á –≤—ã–¥–∞–Ω.", show_alert=True)
        else:
            # –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —ç—Ç–æ –±—ã–ª –ø–ª–∞—Ç–µ–∂ –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            await callback.answer("–≠—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂ (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ) —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
        return

    if not order.payment_id:
        await callback.answer("–û—à–∏–±–∫–∞: ID –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞.", show_alert=True)
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ÆKassa
    payment_info = await check_yookassa_payment(order.payment_id)
    if not payment_info:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa.", show_alert=True)
        return

    # --- –ü–ª–∞—Ç–µ–∂ –£–°–ü–ï–®–ï–ù ---
    if payment_info.status == 'succeeded':
        await db.update_order_status(order_id, order.payment_id, status='paid')

        # === –ü–†–û–í–ï–†–Ø–ï–ú, –≠–¢–û –ü–†–û–î–õ–ï–ù–ò–ï –ò–õ–ò –ù–û–í–´–ô –ö–õ–Æ–ß ===
        metadata = payment_info.metadata
        renewal_key_id_str = metadata.get("renewal_key_id")

        # --- –õ–û–ì–ò–ö–ê –ü–†–û–î–õ–ï–ù–ò–Ø ---
        if renewal_key_id_str:
            try:
                renewal_key_id = int(renewal_key_id_str)
                await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–¥–ª–µ–≤–∞—é –∫–ª—é—á...")

                # 1. –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏ –ø—Ä–æ–¥—É–∫—Ç
                key_to_renew = await db.get_key_by_id(renewal_key_id)
                product = await db.get_product_by_id(order.product_id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á –∏ –ø—Ä–æ–¥—É–∫—Ç —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if not key_to_renew or not product or key_to_renew.user_id != callback.from_user.id:
                    log.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è: –ö–ª—é—á {renewal_key_id} –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç {order.product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω/–Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}.")
                    raise ValueError("–ö–ª—é—á –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")

                # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
                now = datetime.datetime.now()
                # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è, –µ—Å–ª–∏ –∫–ª—é—á –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω, –∏–Ω–∞—á–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
                start_date = max(now, key_to_renew.expires_at)
                new_expiry_date = start_date + datetime.timedelta(days=product.duration_days)

                # 3. –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á –≤ –ë–î
                await db.update_key_expiry(renewal_key_id, new_expiry_date)

                # 4. TODO (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): –û–±–Ω–æ–≤–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ X-UI
                # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –µ—Å–ª–∏ X-UI/Xray –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç `expiryTime` –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏.
                # –ù–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.
                # log.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ X-UI –¥–ª—è –∫–ª—é—á–∞ {renewal_key_id}...")
                # ... (–∑–¥–µ—Å—å –≤—ã–∑–æ–≤ vpn_api.update_client_expiry(...) ) ...

                # 5. –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—Ö–µ
                success_text = (
                    f"‚úÖ **–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω!**\n\n"
                    f"–¢–∞—Ä–∏—Ñ: **{product.name}**\n"
                    f"–ù–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ **{new_expiry_date.strftime('%Y-%m-%d %H:%M')}**"
                )
                await callback.message.edit_text(
                    success_text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–ö —Å–ø–∏—Å–∫—É –∫–ª—é—á–µ–π", callback_data="menu:keys")],
                        [InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")]
                    ]),
                    parse_mode="Markdown"
                )

            except Exception as e:
                log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–ª—é—á–∞ {renewal_key_id_str} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
                await callback.message.edit_text(
                    "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–ª—é—á–∞**\n\n"
                    "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n"
                    "–ú—ã —É–∂–µ —É–≤–µ–¥–æ–º–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[[InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")]])
                )
                # –ú–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –æ—à–∏–±–æ—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã
                # await db.delete_order(order_id)

        # --- –õ–û–ì–ò–ö–ê –í–´–î–ê–ß–ò –ù–û–í–û–ì–û –ö–õ–Æ–ß–ê ---
        else:
            await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–ª—é—á...")
            country = metadata.get("country")

            # –ê–≤–∞—Ä–∏–π–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ metadata
            if not country:
                log.error(f"!!! –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ –≤ metadata –ø–ª–∞—Ç–µ–∂–∞ {payment_info.id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                product_for_country = await db.get_product_by_id(order.product_id)
                if product_for_country and product_for_country.country:
                    country = product_for_country.country
                    log.warning(f"–°—Ç—Ä–∞–Ω–∞ '{country}' –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ Product ID {order.product_id}")
                else:
                    country = settings.XUI_SERVERS[0].country if settings.XUI_SERVERS else "Unknown"
                    log.warning(f"–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: '{country}'")

                if country == "Unknown":
                    await callback.message.edit_text(
                        "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É —Å–µ—Ä–≤–µ—Ä–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
                    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –æ—à–∏–±–æ—á–Ω—ã–π
                    await db.update_order_status(order_id, payment_info.id, status='failed')
                    return

            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–¥–∞—á–∏ –∫–ª—é—á–∞
            success, vless_string = await issue_key_to_user(
                bot=bot,
                user_id=order.user_id,
                product_id=order.product_id,
                order_id=order.id,
                country=country
            )

            if success:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                product = await db.get_product_by_id(order.product_id)
                expires_at = datetime.datetime.now() + datetime.timedelta(days=product.duration_days)
                success_text = (
                    f"‚úÖ **–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! ({country})**\n\n"
                    "–í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:\n"
                    f"```\n{vless_string}\n```\n\n"
                    f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: **{product.duration_days} –¥–Ω–µ–π** (–¥–æ {expires_at.strftime('%Y-%m-%d %H:%M')})\n\n"
                    "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ V2Box."
                )
                await callback.message.edit_text(
                    success_text,
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[[InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")]]),
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                )
            else:
                # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ –≤—ã–¥–∞—á–∏
                await callback.message.edit_text(
                    "‚ùå **–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –∫–ª—é—á–∞**\n\n"
                    "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n"
                    "–ú—ã —É–∂–µ —É–≤–µ–¥–æ–º–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[[InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")]])
                )
                # –ü–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –æ—à–∏–±–æ—á–Ω—ã–π, —á—Ç–æ–±—ã –∞–¥–º–∏–Ω —Ä–∞–∑–æ–±—Ä–∞–ª—Å—è
                await db.update_order_status(order_id, payment_info.id, status='failed')

    # --- –ü–ª–∞—Ç–µ–∂ –ù–ï –£–°–ü–ï–®–ï–ù ---
    elif payment_info.status == 'pending':
        await callback.answer("–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.", show_alert=True)

    elif payment_info.status in ('canceled',
                                 'waiting_for_capture'):  # 'waiting_for_capture' —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—ã–º –ø–æ–∫–∞
        await callback.answer(f"–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (—Å—Ç–∞—Ç—É—Å: {payment_info.status}).",
                              show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ë–î –Ω–∞ 'failed'
        await db.update_order_status(order_id, order.payment_id, status='failed')

    else:  # –î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã (—Ä–µ–¥–∫–æ)
        log.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_info.id}: {payment_info.status}")
        await callback.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment_info.status}", show_alert=True)
