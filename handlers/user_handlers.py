# handlers/user_handlers.py
import datetime
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart

from keyboards import get_main_menu_kb, get_payment_kb
from database import db_commands as db
from payments import create_yookassa_payment, check_yookassa_payment  # –°–æ–∑–¥–∞–¥–∏–º –≤ —à–∞–≥–µ 3
from utils import generate_vless_key  # –°–æ–∑–¥–∞–¥–∏–º –≤ —à–∞–≥–µ 4

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start"""
    await db.get_or_create_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.full_name
    )
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ VPN-–∫–ª—é—á–µ–π. "
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
        reply_markup=get_main_menu_kb()
    )


# === –ò–Ω–ª–∞–π–Ω-–Ω–∞–≤–∏–≥–∞—Ü–∏—è ===

@router.callback_query(F.data == "menu:main")
async def menu_main(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∏–Ω–ª–∞–π–Ω)."""
    await callback.message.edit_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ VPN-–∫–ª—é—á–µ–π. "
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
        reply_markup=get_main_menu_kb()
    )


@router.callback_query(F.data == "menu:buy")
async def menu_buy(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ (–∏–Ω–ª–∞–π–Ω)."""
    products = await db.get_products()
    if not products:
        await callback.message.edit_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤.",
            reply_markup=get_main_menu_kb()
        )
        return

    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:\n\n"
    buttons = []
    for product in products:
        text += f"üîπ **{product.name}** - {product.price} —Ä—É–±.\n"
        buttons.append([
            InlineKeyboardButton(
                text=f"{product.name} ({product.price} —Ä—É–±.)",
                callback_data=f"buy_product:{product.id}"
            )
        ])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")])

    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "menu:keys")
async def menu_keys(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–Ω–ª–∞–π–Ω)."""
    user_keys = await db.get_user_keys(callback.from_user.id)
    if not user_keys:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")]]
            ),
        )
        return

    text = "üîë **–í–∞—à–∏ –∫–ª—é—á–∏:**\n\n"
    now = datetime.datetime.now()
    for i, key in enumerate(user_keys, 1):
        if key.expires_at > now:
            status = "‚úÖ *–ê–∫—Ç–∏–≤–µ–Ω*"
            remaining = key.expires_at - now
            time_left = f"{remaining.days} –¥–Ω. {remaining.seconds // 3600} —á."
        else:
            status = "‚ùå *–ò—Å—Ç–µ–∫*"
            time_left = "0"
        text += (
            f"**–ö–ª—é—á #{i}** ({status})\n"
            f"–ò—Å—Ç–µ–∫–∞–µ—Ç: `{key.expires_at.strftime('%Y-%m-%d %H:%M')}`\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {time_left}\n"
            f"```\n{key.vless_key}\n```\n\n"
        )

    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        disable_web_page_preview=True,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")]]
        ),
    )


@router.callback_query(F.data.in_({"menu:help", "menu:support"}))
async def menu_static(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∏–Ω–ª–∞–π–Ω)."""
    if callback.data == "menu:help":
        text = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é V2Box:\n1. ...\n2. ..."
    else:
        text = "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @CoId_Siemens"

    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")]]
        ),
    )


@router.message(F.text == "üõí –ö—É–ø–∏—Ç—å VPN")
async def buy_vpn(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤"""
    products = await db.get_products()
    if not products:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤.")
        return

    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:\n\n"
    buttons = []
    for product in products:
        text += f"üîπ **{product.name}** - {product.price} —Ä—É–±.\n"
        buttons.append([
            InlineKeyboardButton(
                text=f"{product.name} ({product.price} —Ä—É–±.)",
                callback_data=f"buy_product:{product.id}"
            )
        ])

    await message.answer(text,
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
                         parse_mode="Markdown")


@router.callback_query(F.data.startswith("buy_product:"))
async def process_buy_callback(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–∞—Ä–∏—Ñ–∞"""
    await callback.answer(cache_time=1)  # –°–Ω–∏–º–∞–µ–º "—á–∞—Å–∏–∫–∏"
    product_id = int(callback.data.split(":")[1])

    product = await db.get_product_by_id(product_id)
    if not product:
        await callback.message.edit_text(
            "–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:buy")]]
            ),
        )
        await callback.answer()
        return

    # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
    order_id = await db.create_order(
        user_id=callback.from_user.id,
        product_id=product_id,
        amount=product.price
    )

    # 2. –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –≤ –ÆKassa
    payment_url, payment_id = await create_yookassa_payment(
        amount=product.price,
        description=f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ '{product.name}' (–ó–∞–∫–∞–∑ #{order_id})",
        order_id=order_id
    )

    # 3. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑, –¥–æ–±–∞–≤–ª—è—è payment_id
    await db.update_order_status(order_id, payment_id, status='pending')

    # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    kb = get_payment_kb(payment_url, order_id)
    kb = InlineKeyboardMarkup(
        inline_keyboard=kb.inline_keyboard + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:buy")]]
    )

    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: **{product.name}**\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: **{product.price} —Ä—É–±.**\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:",
        reply_markup=kb,
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("check_payment:"))
async def process_check_payment(callback: CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"
    """
    order_id = int(callback.data.split(":")[1])

    order = await db.get_order_by_id(order_id)
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    if order.status == 'paid':
        await callback.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω.", show_alert=True)
        return

    if not order.payment_id:
        await callback.answer("–û—à–∏–±–∫–∞: ID –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ÆKassa
    payment_info = await check_yookassa_payment(order.payment_id)

    if not payment_info:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞.", show_alert=True)
        return

    if payment_info.status == 'succeeded':
        # –£—Ä–∞, –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞!
        # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –Ω–∞—à–µ–π –ë–î
        await db.update_order_status(order_id, order.payment_id, status='paid')

        # 2. –í—ã–¥–∞–µ–º –∫–ª—é—á (–≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏, –±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
        product = await db.get_product_by_id(order.product_id)
        vless_string = generate_vless_key(order.user_id, product.name)
        expires_at = datetime.datetime.now() + datetime.timedelta(days=product.duration_days)
        await db.add_vless_key(
            user_id=order.user_id,
            order_id=order.id,
            vless_key=vless_string,
            expires_at=expires_at
        )

        # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á –ø—Ä—è–º–æ –≤ —Ç–µ–∫—É—â–µ–º –º–µ–Ω—é + –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        success_text = (
            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            "–í–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:\n"
            f"```\n{vless_string}\n```\n\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: **{product.duration_days} –¥–Ω–µ–π** (–¥–æ {expires_at.strftime('%Y-%m-%d %H:%M')})\n\n"
            "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ V2Box."
        )
        await callback.message.edit_text(
            success_text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:main")]]
            ),
            parse_mode="Markdown",
            disable_web_page_preview=True,
        )
        await callback.answer()

    elif payment_info.status == 'pending':
        await callback.answer("–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...", show_alert=True)

    elif payment_info.status in ('canceled', 'failed'):
        await callback.answer(f"–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω (—Å—Ç–∞—Ç—É—Å: {payment_info.status}).", show_alert=True)

    else:
        await callback.answer(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment_info.status}", show_alert=True)


@router.message(F.text == "üìñ –ú–æ–∏ –∫–ª—é—á–∏")
async def my_keys(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∏—Å—Ç–µ–∫—à–∏–µ –∫–ª—é—á–∏"""
    user_keys = await db.get_user_keys(message.from_user.id)
    if not user_keys:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π.")
        return

    text = "üîë **–í–∞—à–∏ –∫–ª—é—á–∏:**\n\n"
    now = datetime.datetime.now()

    for i, key in enumerate(user_keys, 1):
        if key.expires_at > now:
            status = "‚úÖ *–ê–∫—Ç–∏–≤–µ–Ω*"
            remaining = key.expires_at - now
            time_left = f"{remaining.days} –¥–Ω. {remaining.seconds // 3600} —á."
        else:
            status = "‚ùå *–ò—Å—Ç–µ–∫*"
            time_left = "0"

        text += (
            f"**–ö–ª—é—á #{i}** ({status})\n"
            f"–ò—Å—Ç–µ–∫–∞–µ—Ç: `{key.expires_at.strftime('%Y-%m-%d %H:%M')}`\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {time_left}\n"
            f"```\n{key.vless_key}\n```\n\n"
        )

    await message.answer(text, parse_mode="Markdown", disable_web_page_preview=True)


@router.message(F.text.in_({"‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"}))
async def static_pages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    if message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        text = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é V2Box:\n1. ...\n2. ..."
    else:  # üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞
        text = "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @CoId_Siemens"

    await message.answer(text)